What is the value of smart contracts?
    Trust Minimized Agreements (Unbreakable promises)

    Other features of Smart Contracts:
        1. Decentralized (node operators run blockchains)
        2. Transparency and Flexibility
        3. Speed and Efficiency
        4. Security and Immutability
        5. Counter Party Risk Removal

State of Smart Contracts:
    - Defi (~200B value locked)
    - DAOs - governance Decentralized
    - NFTs 

How do blockchains work?
    - andersbrownworth.com/blockchain (good refresher)
    - hash: A unique fixed length string, meant to identify a piece of data.
    They are created by placing said data into a "hash function".
        - Ethereum uses Keccak256
    - in *a* Block:
        - we hash the Block, Nonce and Data
            - When mining, the Nonce changes. The miners are computing to find the Nonce that starts with 0000
    - Block*chain*:
        - Prev - points to previous hash of the last block
            - if data is changed on a block, that corrupts the blocks after itself. This gives blockchains their immutable property.
    - Distributed:
        - Peers running a blockchain have exact same power as other Peers
        - Hash encompasses all blocks from before
            - Very easy for nodes to make sure they are in sync by looking at last hash
            - Peer nodes keep each other accountable and stop malicious nodes from changing and remining data (democracy rules)
    - Tokens
        - Txs examples
    - Nonce: A 'number used once' to find the "solution" to the blockchain problem. It's also used to define the transaction number for an account/address.

    Instead of data, solidity code will be there to find and interact with different blocks that are on chain (or different smart contracts).
        

Signing Transactions
    - Ethereum uses Elliptic Curve Digtial Signature Algorithm
    - Public and Private Keys
        - Private key: only known to key holder and used to 'sign' Transactions
            - signing txs will create message sig but no one can derive private key from that sig
        - Public Key: people can verify txs
            - Derived from your private key. Anyone can see it and use it to verify that a tx came from you.
        Signing Tx:
            - One way process. Someone with a private key signs a tx by their private key being hashed with their tx data. Anyone can then verify this new transation hash with your public key.

        Private Key -> Public Key -> Address

Gas:
    The more people using the chain, the more expensive it is to send txs.

    EIP1559: Every tx comes to base fee: the minimum *gas price* to send your tx
        - Base fee gets burnt
    - Whenever you send a tx a small amount of Eth is burnt
    - input data for smart contracts in interesting

Different blockchains have different algorithms and implementation
    - Blockchains run on a network of different independent nodes
    Node: a single instance in a decentralized network (1 server running this technology)
        - anyone can join the network
    Blockchains are resilient with thousands of nodes storing copy of txs
    Ethereum: decentralized database and computation in decentralized manner

Consensus
    - Consensus is the mechanism used to agree on the state of a blockchain
    1. Chain Selection Algorithm
        - how do we know that a blockchain is the real blockchain
            - Nakamoto Consensus
                - Combo of PoW and Longest Chain Rule
                - PoW is a piece in the overall consensus protocol.
    2. Sybil Resistance 
        - defends against malicious actors creating fake nodes to control network

    PoW 
        - single node going through computationally expensive process
        Blockchains make this easier or harder to manipulate the block time
            - block time is how long it takes before blocks are published

    Bitcoin halving
        - block reward for miners getting cut in half ~4 years.
             - the Block Reward increases the amount of circulating cryptocurrency
    
    Miners will only get paid with tx fees in future
        
Attacks:
    Sybil Attack
        - bad actor creating accounts to influence network
    51% Attack
        - happened on Eth Classic
        - run a node to increase security of the network!

PoS 
    PoS nodes put up collateral as a sybil resistance mechanism 
        if node misbehaves they lose portion of stake
    Considered slightly less decentralized because of staking requirement


Randomness
    Blockchains are walled garders from rest of world so how do blockchains choose random node
        Eth2 is using Randao
            decentralized organization that chooses the random node

Scalability
    Sharding:
        blockchain of blockchains. The main chain will coordinate the other chains that hook into main chain. This means there are more chains for people to make txs on L1

Layer1: base layer blockchain implementation
Layer2: Any application built on top of a layer 2

Rollups
    Arbitrum and Optimism
    -They roll up their txs into a Layer 1 like ethereum. Roll ups are kind of like a sharded chain. Roll ups derivce security from Layer 1 and bulk send their txs to layer 1
    - Different from side chains because they derive their security from their own protocols

===========================================================

When deploying a contract, it is compiled down to the EVM (Ethereum Virtual Machine)
    - EVM is a standard on how to deploy contracts to the blockchain
    - Any blockchain that implements an EVM, you can deploy a solidity contract to 
        - Avalanche, Fantom, Polygon


===========================================================
Lesson 3 - Remix Storage Factory

Contracts can deploy contracts
    Contracts interacting with each other is Composability 
        - Composability allows Defi contracts to interact and create sophisticated financial products

Importing Contracts
    import statement

Can have different solidity versions

===========================================================
Lesson 4: Remix Fund Me

FundMe.sol 
    - allows people to fund a collective good
    - people can send ether, etc. into this contract and owner of contract can withdraw those funds and do whatever they want
    - this function will have 2 PAYABLE functions (red in Remix
        fund - send money to the contract
            - send value along with transaction
        withdraw 
            - only the person that deployed this contract can withdraw from it!

    Oracle Problem
        - Smart Contracts are deterministic so all nodes could reach consensus -- if not, different nodes would get different data and will not reach consensus 
        - Blockchain oracle: Any device that interacts with the off-chain world to provide external data or computation to smart contracts
        - Chainlink gets data from decentralized network (creates Hybrid smart contracts)
            - Chinlink Data feeds
                - A network of different chainlink nodes gets data from exchanges and data providers and brings that data through a network of decentrazlied chainlink nodes. 
                - Chainlink nodes use a medium to figure out what the acutal price of the asset is and then deliver that in a single transaction to a REFERNCE CONTRACT on chain that other smart contracts can use
                - Then, those smart contracts use that pricing information to power their defi application
                - data.chain.link
                    - popular price feeds
                    - On Eth/usd we see network independent chainlink node operators all getting different answers for eth/usd price
                    - updated .5% deviation threshold or heartbeat (whichever one hits first)
                    - Whenever a node operator delivers data to a smart contract, the chainlink node operators are paid oracle gas in chainlink token (sponsors are paying oracle gas to deliver data on chain)
                    - Reuptation is incredibly important as Chainlink node operator
                    - used by defi protocols

                - docs.chain.link
                    - EVM Chains 
                        - Data feeds

                - Chainlink VRF 
                    - need true randomness by looking outside of blockchain to guarntee fairness and randomness 

                - Chainlink Keepers
                    - Decentralized Event Driven Execution
                        - somebody needs to spend the gas and hit transaction button 
                        - Keepers are chainlink nodes that listen to regitration contract for different events you specify (do x when event x occurs)
                        - chainlink nodes constantly listen for these events
                - End - to - End reliability 
                    - want and need them to take any input and get any output 
                    - Get and Post requests
                    - Chainlink nodes can make api calls 
                    - Need to choose chainlink node and the url/data to send the reuest to 
                    - You have to create chainlink network that gets data from different chainlink nodes and providers

                    - Sending transation for request 
                    - Sending another transation to get data
===================================================
Lesson 6: Hardhat 
    JS based Dev environement to compile, deploy, test and debug EVM based smart contract 

    Grab contracts in hardhat 
        using ethers 
            import ethers directly from hardhat
            hardhat knows about already compiled contracts
    rpc url and address

    Networks in hardhart
        Hardhat comes built-in with Hardhat Network, a local Ethereum network node designed for development, akin to Ganache, geth --dev, etc. It allows you to deploy your contracts, run your tests and debug your code. 
        
        Runs as either an in-process or stand alone daemon, servicing JSON-RPC and WebSocket requests. 


=====================================================
Lesson 7: Hardhat Fund Me 

    Using hardhat deploy - yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers  

    Deploy to testnet as last stop after we do all of our testing locally 
    
    Deploy to hardhat network first
    We could fork a blockchain where we can keep stuff hardcoded, but usually still better to use MOCKS 

    MOCKS
        Mocking is primarily used for uniting testing. An object under test may have dependencies on other objects. To isolate the behavior of the object you want to replace the other objects by mocks that simulate the behavior of the real objects. This is useful if the real objects are impractical to incorporate into the unit test. 

        In short, mocking is creating objects that simulate the behavior of real objects.

    Essentially, we are creating a fake price feed contract that we can control when working locally.  

    Need to add mock to contracts folder

    Create scripts to deploy to any chain (locally, testnet or mainnet)

    

    Unit Test 
        - testing minimal portions of our code's functionality isolated from other parts of functionality
        - could be done with 
            - local hardhat 
            - forked hardhat 

    Staging (Integration testing) - Last Stop before deploying

    e2e test?


When building Dapps, you usually have 2 repos: 
    - one for the smart contracts 
    - one for the front end/ website

Full Stack = Smart Contracts (backend) + JS/HTML/CSS (frontend)

